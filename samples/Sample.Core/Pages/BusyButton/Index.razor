@page "/busybutton/index"

<h1>BusyButton</h1>

<p>Busy Button Control</p>

<Instructions></Instructions>

<h2 class="mb-3">Examples</h2>

<h3>Basic</h3>

<p>Example of using BusyButton</p>

<div class="m-1">
    <div class="form-check m-1">
        <input type="checkbox"
               class="form-check-input"
               id="busy-check"
               @bind="IsBusy">
        <label class="form-check-label"
               for="busy-check">Loading</label>
    </div>
    <div class="form-check m-1">
        <input type="checkbox"
               class="form-check-input"
               id="busy-check"
               @bind="IsDisabled">
        <label class="form-check-label"
               for="busy-check">Disabled</label>
    </div>
</div>

<div class="m-1">
    <BusyButton Busy="@IsBusy"
                BusyText="Saving"
                Disabled="@IsDisabled"
                id="save-button"
                type="submit"
                class="btn btn-primary">
        Save
    </BusyButton>
</div>

<div class="m-1">
    <BusyButton Busy="@IsBusy"
                Disabled="@IsDisabled"
                id="save-button"
                type="submit"
                class="btn btn-primary">
        <BusyTemplate>
            <span class='spinner-border spinner-border-sm'></span> Saving...
        </BusyTemplate>
        <ChildContent>
            Save
        </ChildContent>
    </BusyButton>
</div>


<div class="m-1">
    <BusyButton Busy="@IsBusy"
                Disabled="@IsDisabled"
                Trigger="Process"
                id="save-button"
                class="btn btn-primary">
        Process
    </BusyButton>
</div>

@code {
    [Parameter]
    public bool IsBusy { get; set; } = true;

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    public async Task Process()
    {
        await Task.Delay(2000);
    }
}
