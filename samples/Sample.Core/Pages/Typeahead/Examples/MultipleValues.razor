@using Sample.Core.Models
@using Sample.Core.Services
<h3>Multiselect Example</h3>

<p>When you want to be able to select multiple results.  Bind to the <code>Values</code> property.  The target property must be type <code>IList&lt;T&gt;</code>. </p>

<Typeahead SearchMethod="@SearchPeople"
           Items="Data.PersonList"
           @bind-Values="@SelectedPeople"
           Placeholder="Owners">
    <SelectedTemplate Context="person">
        @person.FullName
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.FullName
    </ResultTemplate>
</Typeahead>

<p>Bound Values: @BoundValues()</p>

<pre><code class="language-markup">&lt;Typeahead SearchMethod=&quot;@@SearchPeople&quot;
           Items=&quot;Data.PersonList&quot;
           @@bind-Values=&quot;@@SelectedPeople&quot;
           Placeholder=&quot;Owners&quot;&gt;
    &lt;SelectedTemplate Context=&quot;person&quot;&gt;
        @@person.FullName
    &lt;/SelectedTemplate&gt;
    &lt;ResultTemplate Context=&quot;person&quot;&gt;
        @@person.FullName
    &lt;/ResultTemplate&gt;
&lt;/Typeahead&gt;</code></pre>

<pre><code class="language-csharp">@@code {
    public IList&lt;Person&gt; SelectedPeople;

    public Task&lt;IEnumerable&lt;Person&gt;&gt; SearchPeople(string searchText)
    {
        var result = Data.PersonList
            .Where(x =&gt; x.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();

        return Task.FromResult&lt;IEnumerable&lt;Person&gt;&gt;(result);
    }
 }</code></pre>

@code {
    public IList<Person> SelectedPeople = [];

    public Task<IEnumerable<Person>> SearchPeople(string searchText)
    {
        var result = Data.PersonList
            .Where(x => x.FullName?.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();

        return Task.FromResult<IEnumerable<Person>>(result);
    }

    public string BoundValues()
    {
        if (SelectedPeople == null || SelectedPeople.Count == 0)
            return String.Empty;

        var items = SelectedPeople.Select(p => p.FullName);
        return string.Join(", ", items);
    }
}
