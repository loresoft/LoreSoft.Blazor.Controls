@using Sample.Core.Services
@using Sample.Core.Models
<h3>Basic</h3>

<button class="btn btn-secondary"
        @onclick="@(() => SetSort("Id"))">
    Sort By Id
</button>
<button class="btn btn-secondary"
        @onclick="@(() => SetPage(5))">
    Go to page 5
</button>
<button class="btn btn-secondary"
        @onclick="@(() => SetPageSize(25))">
    Page Size 25
</button>
<button class="btn btn-secondary"
        @onclick="ApplyFilter">
    Filter High Score
</button>

<DataGrid Data="People"
          TItem="Person"
          Filterable="true"
          Selectable="true"
          Borders="@Borders.All"
          RowDoubleClick="HandleRowClick"
          @bind-SelectedItems="Selected"
          @ref="DataGrid">
    <DataToolbar>
        <DataGridToolbar Title="Sample Grid" />
    </DataToolbar>
    <DataColumns>
        <DataColumn TItem="Person"
                    Property="p => p.Id"
                    Width="90px"
                    Hideable="false">
            <Template Context="item">
                <a href="#"
                   class="d-block"
                   title="@item.FullName">@item.Id</a>
            </Template>
        </DataColumn>
        <DataColumn TItem="Person"
                    Property="p => p.FirstName"
                    SortIndex="1" />
        <DataColumn TItem="Person"
                    Property="p => p.LastName"
                    SortIndex="0" />
        <DataColumn TItem="Person"
                    Property="p => p.Score"
                    Width="120px"
                    CellStyle="@SoreStyle"
                    Align="TextAlign.Right">
            <FooterTemplate Context="items">
                @if (items != null && items.Count > 0)
                {
                    <div>Avg: @String.Format("{0:N2}", items.Average(i => i.Score))</div>
                }
                else
                {
                    <div>Avg: 0</div>
                }
            </FooterTemplate>
        </DataColumn>
        <DataColumn TItem="Person"
                    Property="p => p.Location"
                    Sortable="true"
                    FilterValues="Locations">
            <HeaderTemplate>
                <div style="color: darkblue"><i class="bi bi-geo-alt-fill"></i>Location</div>
            </HeaderTemplate>
        </DataColumn>
        <DataColumn TItem="Person"
                    Property="p => p.Birthday"
                    Width="110px"
                    Format="d"
                    Align="TextAlign.End" />
        <DataColumn TItem="Person"
                    Property="p => p.FullName"
                    Visible="false"
                    MultiLine="false" />
    </DataColumns>
    <DataPagination Context="grid">
        <DataPager PageSize="10" />
        <DataSizer />
        <div>@grid.Pager.StartItem - @grid.Pager.EndItem of @grid.Pager.Total</div>
    </DataPagination>
</DataGrid>

<div class="mt-5">
    <h4>Selected</h4>
    <ul>
        @foreach (var person in Selected)
        {
            <li>@person.FullName</li>
        }
    </ul>
</div>

@code {
    public Basic()
    {
        SearchText = new DebounceValue<string>(HandleSearch);
    }

    public ICollection<Person> People { get; set; } = [];

    public IEnumerable<Person> Selected { get; set; } = new List<Person>();

    private DataGrid<Person>? DataGrid { get; set; }

    protected DebounceValue<string> SearchText { get; set; }

    protected List<string> Locations { get; set; } = ["North", "South", "East", "West"];

    protected override void OnInitialized()
    {
        People = Data.GeneratePeople(200).ToList();
    }

    protected string? SoreStyle(Person person)
    {
        if (person.Score > 75)
            return "background-color: #dc3545";

        if (person.Score > 50)
            return "background-color: #ffc107";

        return null;
    }

    private async Task ApplyFilter()
    {
        if (DataGrid == null)
            return;

        List<QueryRule> filters = [
            new QueryFilter { Field = nameof(Person.Score), Operator = QueryOperators.GreaterThan, Value = 50 },
            new QueryFilter { Field = nameof(Person.Birthday), Operator = QueryOperators.GreaterThan, Value = new DateTime(2000, 1, 1) }
        ];

        await DataGrid.ApplyFilters(filters, true);
    }

    private void HandleRowClick(Person person)
    {
        Console.WriteLine("Row Click: {0}", person.FullName);
    }

    protected void HandleSearch(string? searchText)
    {
        if (DataGrid == null)
            return;

        InvokeAsync(() => DataGrid.QuickSearch(searchText));
    }

    private void SetPage(int page)
    {
        if (DataGrid == null)
            return;

        DataGrid.Pager.Page = page;
    }

    private void SetPageSize(int size)
    {
        if (DataGrid == null)
            return;

        DataGrid.Pager.PageSize = size;
    }

    private Task SetSort(string column)
    {
        if (DataGrid == null)
            return Task.CompletedTask;

        return DataGrid.SortByAsync(column);
    }
}
