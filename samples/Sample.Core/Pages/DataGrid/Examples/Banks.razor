@using Sample.Core.Services
@using Sample.Core.Models

<h3>Banks</h3>

<DataGrid DataLoader="LoadData"
          class="table table-hover"
          @ref="DataGrid"
          RowAttributes="RowAttributes"
          Filterable="true"
          Groupable="true">
    <DataToolbar>
        <DataGridToolbar Title="Bank Accounts" />
    </DataToolbar>
    <DataColumns>
        <DataColumn TItem="Bank" Property="p => p.BankName" Grouping="true" SortIndex="0" />
        <DataColumn TItem="Bank" Property="p => p.Id" Width="70px" data-test="testing" CellAttributes="CellAttributes" />
        <DataColumn TItem="Bank" Property="p => p.AccountNumber" Width="150px" Title="Account" />
        <DataColumn TItem="Bank" Property="p => p.IBAN" Width="200px" />
        <DataColumn TItem="Bank" Property="p => p.RoutingNumber" Width="200px" />
        <DataColumn TItem="Bank" Property="p => p.SwiftBIC" Width="200px" />
    </DataColumns>
    <DataPagination Context="grid">
        <DataPager PageSize="100" />
        <DataSizer />
        <div>@grid.Pager.StartItem - @grid.Pager.EndItem of @grid.Pager.Total</div>
    </DataPagination>
</DataGrid>


@code {
    private DataGrid<Bank> DataGrid { get; set; }

    private Dictionary<string, object> CellAttributes(Bank bank)
    {
        return new Dictionary<string, object>
        {
            { "data-key-" + bank.Id, "Test " + bank.BankName }
        };
    }

    private Dictionary<string, object> RowAttributes(Bank bank)
    {
        return new Dictionary<string, object>
        {
            { "data-row-" + bank.Id, "Test " + bank.BankName }
        };
    }

    private async Task<IEnumerable<Bank>> LoadData()
    {
        // Simulate a delay
        await Task.Delay(500);
        return Data.GenerateBanks(100);
    }
}
