@typeparam TItem
@inherits DataComponentBase<TItem>
@namespace LoreSoft.Blazor.Controls

@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

<CascadingValue Value="this" Name="Grid">
    <div class="data-grid-container">
        @if (DataToolbar != null)
        {
            @DataToolbar(this)
        }
        @if (DataColumns != null)
        {
            @DataColumns
        }

        <div class="data-grid-responsive">
            <div class="data-grid data-grid--bordered"
                 role="grid"
                 @attributes="@AdditionalAttributes"
                 aria-label="Data Grid">

                <div class="data-grid__header"
                     role="row">

                    @if (Selectable)
                    {
                        <div class="data-grid__header-cell data-grid__cell--checkbox"
                             role="columnheader">
                            <input type="checkbox"
                                   class="data-grid__checkbox"
                                   name="select-all-grouped"
                                   aria-label="Select all rows">
                        </div>
                    }

                    @if (HasGrouping)
                    {
                        <div class="data-grid__header-cell data-grid__cell--expand"
                             role="columnheader">
                            <span class="sr-only">Expand</span>
                        </div>
                    }

                    @foreach (var column in VisibleColumns)
                    {
                        @HeaderFragment(column)
                    }
                </div>

                @if (DataError != null)
                {
                    <div class="data-grid__error">
                        @if (ErrorTemplate != null)
                        {
                            @ErrorTemplate(DataError)
                        }
                        else
                        {
                            @DataError.Message
                        }
                    </div>
                }
                else if (View == null)
                {
                    <div class="data-grid__skeleton">
                        @for (int i = 0; i < 5; i++)
                        {
                            <Skeleton @key="i" />
                        }
                    </div>
                }
                else if (View.Count == 0)
                {
                    <div class="data-grid__empty">
                        @if (EmptyTemplate != null)
                        {
                            @EmptyTemplate
                        }
                        else
                        {
                            <span>No records to display</span>
                        }
                    </div>
                }
                else if (Virtualize)
                {
                    <Virtualize TItem="TItem"
                                Items="View"
                                Context="item"
                                ItemSize="VirtualItemSize"
                                OverscanCount="VirtualOverscan">
                        @RowFragment(item)
                    </Virtualize>
                }
                else if (HasGrouping)
                {
                    var groupColumn = Columns.FirstOrDefault(c => c.Grouping) ?? Columns.First();
                    foreach (var group in View.GroupBy(groupColumn.CellValue))
                    {
                        @GroupFragment((groupColumn, group ))
                    }
                }
                else
                {
                    @foreach (var item in View)
                    {
                        @RowFragment(item)
                    }
                }
            </div>



            <table class="data-grid" @attributes="@AdditionalAttributes">
                <colgroup>
                    @if (DetailTemplate != null || HasGrouping)
                    {
                        <col style="width: 32px; padding: 0" />
                    }
                    @if (Selectable)
                    {
                        <col style="width: 32px; padding: 0" />
                    }
                    @foreach (var column in VisibleColumns)
                    {
                        <col class="@column.ColumnClass"
                             style="@column.CurrentColumnStyle" />
                    }
                </colgroup>
                <thead>
                    <tr>
                        @if (DetailTemplate != null || HasGrouping)
                        {
                            <th class="data-grid-hierarchy-cell">
                            </th>
                        }
                        @if (Selectable)
                        {
                            <th class="data-grid-selector-cell">
                                <div class="data-check">
                                    <input class="data-check-input"
                                           type="checkbox"
                                           checked="@IsAllSelected()"
                                           title="Select All"
                                           @onchange="ToggleSelectAll" />
                                </div>
                            </th>
                        }
                        @foreach (var column in VisibleColumns)
                        {
                            <th @key="column"
                                class="@column.HeaderClass"
                                style="@column.ComputeHeaderStyle()">
                                <div class="data-grid-header">
                                    @if (Sortable && column.Sortable)
                                    {
                                        <button type="button"
                                                class="data-grid-header-title"
                                                title="Sort by @column.HeaderName"
                                                @onclick="() => SortByAsync(column)">
                                            @HeaderFragment(column)
                                        </button>
                                    }
                                    else
                                    {
                                        <div class="data-grid-header-title">
                                            @HeaderFragment(column)
                                        </div>
                                    }

                                    @if (column.Sortable && column.CurrentSortIndex >= 0)
                                    {
                                        <div class="data-grid-header-sort">
                                            <span class="@(column.CurrentSortDescending ? "data-grid-header-sort-desc" : "data-grid-header-sort-asc")"></span>
                                        </div>
                                    }

                                    @if (Filterable && column.Filterable)
                                    {
                                        <button type="button"
                                                class="data-grid-header-filter"
                                                title="Show Filter Dialog"
                                                @onclick="ShowFilter">
                                            <span class="@(IsFilterActive() ? "data-grid-header-filter-active" : "data-grid-header-filter-icon")"></span>
                                        </button>
                                    }
                                </div>
                            </th>
                        }
                    </tr>
                    @if (FilterOpen)
                    {
                        <tr>
                            <td colspan="@CellCount" class="filter-row">
                                <div class="filter">
                                    <div class="filter-background"
                                         @onclick="CloseFilter"></div>

                                    <div class="filter-container">
                                        <form name="filter-builder-form" @onsubmit="ApplyFilters">
                                            <QueryBuilder TItem="TItem" Query="RootQuery">
                                                <QueryFields>
                                                    @foreach (var column in Columns.Where(c => c.Filterable))
                                                    {
                                                        <QueryBuilderField @key="column"
                                                                           Field="column.Property"
                                                                           Title="@column.HeaderName"
                                                                           Values="@column.FilterValues"
                                                                           ValueTemplate="@column.FilterTemplate" />
                                                    }
                                                </QueryFields>
                                                <FooterTemplate>
                                                    <div class="filter-footer">
                                                        <button type="submit"
                                                                class="query-button">
                                                            Apply
                                                        </button>

                                                        <button type="button"
                                                                class="query-button"
                                                                @onclick="ClearFilters">
                                                            Clear
                                                        </button>
                                                    </div>
                                                </FooterTemplate>
                                            </QueryBuilder>
                                        </form>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (ColumnPickerOpen)
                    {
                        <tr>
                            <td colspan="@CellCount" class="column-picker-row">
                                <div class="column-picker">
                                    <div class="column-picker-background"
                                         @onclick="CloseColumnPicker"></div>
                                    <div class="column-picker-container">
                                        <div class="column-picker-list">
                                            @foreach (var column in Columns)
                                            {
                                                <label @key="column"
                                                       title="Toggle '@column.HeaderName' Visibility"
                                                       class="column-picker-label">
                                                    <input class="column-picker-checkbox"
                                                           type="checkbox"
                                                           disabled="@(!column.Hideable)"
                                                           checked="@column.CurrentVisible"
                                                           @onchange="() => ToggleVisible(column)" />
                                                    <span class="column-picker-text">
                                                        @column.HeaderName
                                                    </span>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </thead>
                <tbody>
                    @if (DataError != null)
                    {
                        <tr>
                            <td colspan="@CellCount" class="data-grid-error">
                                @if (ErrorTemplate != null)
                                {
                                    @ErrorTemplate(DataError)
                                }
                                else
                                {
                                    @DataError.Message
                                }
                            </td>
                        </tr>
                    }
                    else if (View == null)
                    {
                        for (int i = 0; i < 5; i++)
                        {
                            <tr @key="i">
                                @if (DetailTemplate != null || HasGrouping)
                                {
                                    <td class="data-grid-hierarchy-cell">
                                    </td>
                                }
                                @if (Selectable)
                                {
                                    <td class="data-grid-selector-cell">
                                    </td>
                                }
                                @foreach (var column in VisibleColumns)
                                {
                                    <td @key="column" class="@column.ClassName">
                                        <Skeleton />
                                    </td>
                                }
                            </tr>
                        }
                    }
                    else if (View.Count == 0)
                    {
                        <tr>
                            <td colspan="@CellCount" class="data-grid-empty">
                                @if (EmptyTemplate != null)
                                {
                                    @EmptyTemplate
                                }
                                else
                                {
                                    <span>No records to display</span>
                                }
                            </td>
                        </tr>
                    }
                    else if (Virtualize)
                    {
                        <Virtualize TItem="TItem"
                                    Items="View"
                                    Context="item"
                                    ItemSize="VirtualItemSize"
                                    OverscanCount="VirtualOverscan">
                            @RowFragment(item)
                        </Virtualize>
                    }
                    else if (HasGrouping)
                    {
                        var groupColumn = Columns.FirstOrDefault(c => c.Grouping) ?? Columns.First();

                        foreach (var group in View.GroupBy(groupColumn.CellValue))
                        {
                            var groupKey = group.Key;

                            <tr @key="group" class="data-grid-group-row">
                                <td class="data-grid-hierarchy-cell">
                                    <button type="button"
                                            @onclick="() => ToggleGroupRow(groupKey)"
                                            title="Show Group"
                                            class="data-grid-group-button @(IsGroupExpanded(groupKey) ? "data-grid-group-button-expanded" : "data-grid-group-button-collapsed")"></button>
                                </td>
                                @if (Selectable)
                                {
                                    <td></td>
                                }
                                @foreach (var column in VisibleColumns)
                                {
                                    <td @key="column">
                                        @if (column.GroupTemplate != null)
                                        {
                                            @column.GroupTemplate(group)
                                        }
                                        else if (column == groupColumn)
                                        {
                                            @groupKey
                                        }
                                    </td>
                                }
                            </tr>

                            @if (IsGroupExpanded(groupKey))
                            {
                                @foreach (var item in group)
                                {
                                    @RowFragment(item)
                                }
                            }
                        }
                    }
                    else
                    {
                        @foreach (var item in View)
                        {
                            @RowFragment(item)
                        }
                    }
                </tbody>
                @if (VisibleColumns.Any(c => c.FooterTemplate != null))
                {
                    <tfoot>
                        <tr>
                            @if (DetailTemplate != null || HasGrouping)
                            {
                                <td></td>
                            }
                            @if (Selectable)
                            {
                                <td></td>
                            }
                            @foreach (var column in VisibleColumns)
                            {
                                <td @key="column">
                                    @if (column.FooterTemplate != null)
                                    {
                                        @column.FooterTemplate(View!)
                                    }
                                </td>
                            }
                        </tr>
                    </tfoot>
                }
            </table>
        </div>

        @if (DataPagination != null)
        {
            <CascadingValue IsFixed="true" Value="Pager" Name="PagerState">
                <div class="data-pagination">
                    @DataPagination(this)
                </div>
            </CascadingValue>
        }
        @if (IsLoading)
        {
            @if (LoadingTemplate == null)
            {
                <LoadingBlock IsLoading="true" ShowOverlay="true" LoadingText="" />
            }
            else
            {
                @LoadingTemplate
            }
        }
    </div>
</CascadingValue>

@code
{
    protected RenderFragment<DataColumn<TItem>> HeaderFragment => column => __builder =>
    {
        <div @key="column"
             class="@column.CurrentHeaderClass"
             style="@column.CurrentHeaderStyle"
             role="columnheader"
             tabindex="0"
             aria-sort="@column.CurrentSort">

            @if (column.HeaderTemplate != null)
            {
                @column.HeaderTemplate
            }
            else
            {
                @column.HeaderName
            }

            @if (column.Sortable)
            {
                <span class="data-grid__sort-icon data-grid__sort-icon--@column.CurrentSort"
                      aria-hidden="true"></span>
            }
        </div>
    };

    protected RenderFragment<TItem> RowFragment => item => __builder =>
    {
        <tr @key="new {item, i = 0}"
            @attributes="RowAttributes?.Invoke(item)"
            @ondblclick="() => RowDoubleClick.InvokeAsync(item)"
            class="@RowClass"
            style="@(RowStyle?.Invoke(item))">

            @if (DetailTemplate != null)
            {
                <td class="data-grid-hierarchy-cell">
                    <button type="button"
                            @onclick="() => ToggleDetailRow(item)"
                            title="Show Details"
                            class="data-grid-hierarchy-button @(IsRowExpanded(item) ? "data-grid-hierarchy-button-expanded" : "data-grid-hierarchy-button-collapsed")"></button>
                </td>
            }
            else if (HasGrouping)
            {
                <td class="data-grid-hierarchy-cell"></td>
            }

            @if (Selectable)
            {
                <td class="data-grid-selector-cell">
                    <div class="data-check">
                        <input class="data-check-input"
                               type="checkbox"
                               checked="@(IsRowSelected(item))"
                               title="Select Row"
                               @onchange="() => ToggleSelectRow(item)" />
                    </div>
                </td>
            }

            @foreach (var column in VisibleColumns)
            {
                <td @key="column"
                    class="@column.ClassName"
                    style="@(column.ComputeStyle(item))"
                    @attributes="@(column.ComputeAttributes(item))">
                    @if (column.Template != null)
                    {
                        @column.Template(item)
                    }
                    else
                    {
                        @column.CellValue(item)
                    }
                </td>
            }
        </tr>
        @if (DetailTemplate != null && IsRowExpanded(item))
        {
            <tr @key="new { item, i = 1 }" class="data-grid-detail-row">
                <td colspan="@CellCount" class="data-grid-detail-cell">
                    @DetailTemplate(item)
                </td>
            </tr>
        }
    };

    protected RenderFragment<(DataColumn<TItem>, IGrouping<string, TItem>)> GroupFragment => item => __builder =>
    {
        var groupColumn = item.Item1;

        var group = item.Item2;
        var groupKey = group.Key;

        <tr @key="groupKey" class="data-grid-group-row">
            <td class="data-grid-hierarchy-cell">
                <button type="button"
                        @onclick="() => ToggleGroupRow(groupKey)"
                        title="Show Group"
                        class="data-grid-group-button @(IsGroupExpanded(groupKey) ? "data-grid-group-button-expanded" : "data-grid-group-button-collapsed")"></button>
            </td>
            @if (Selectable)
            {
                <td></td>
            }
            @foreach (var column in VisibleColumns)
            {
                <td @key="column">
                    @if (column.GroupTemplate != null)
                    {
                        @column.GroupTemplate(group)
                    }
                    else if (column == groupColumn)
                    {
                        @groupKey
                    }
                </td>
            }
        </tr>

        @if (IsGroupExpanded(groupKey))
        {
            @foreach (var item in group)
            {
                @RowFragment(item)
            }
        }
    };
}
