@typeparam TItem
@inherits DataComponentBase<TItem>
@namespace LoreSoft.Blazor.Controls

@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

<CascadingValue Value="this"
                Name="Grid">
    <div class="data-grid--container">
        @if (DataToolbar != null)
        {
            @DataToolbar(this)
        }
        @if (DataColumns != null)
        {
            @DataColumns
        }

        <div class="data-grid--responsive">
            <div role="grid"
                 class="@ComputeGridClass()"
                 @attributes="@AdditionalAttributes"
                 aria-label="Data Grid">

                <div class="data-grid__header"
                     role="row">


                    @if (DetailTemplate != null || HasGrouping)
                    {
                        <div class="data-grid__header-cell data-grid__cell--expand"
                             role="columnheader">

                        </div>
                    }
                    @if (Selectable)
                    {
                        <div class="data-grid__header-cell data-grid__cell--checkbox"
                             role="columnheader">
                            <input type="checkbox"
                                   name="select-all-rows"
                                   class="data-grid__checkbox"
                                   checked="@IsAllSelected()"
                                   aria-label="Select all rows"
                                   @onchange="ToggleSelectAll" />
                        </div>
                    }

                    @foreach (var column in VisibleColumns)
                    {
                        @HeaderFragment(column)
                    }
                </div>

                @if (FilterOpen)
                {
                    <div class="data-grid__filter">
                        <div class="filter">
                            <div class="filter-background"
                                 @onclick="CloseFilter"></div>

                            <div class="filter-container">
                                <form name="filter-builder-form"
                                      @onsubmit="ApplyFilters">
                                    <QueryBuilder TItem="TItem"
                                                  Query="RootQuery">
                                        <QueryFields>
                                            @foreach (var column in Columns.Where(c => c.Filterable))
                                            {
                                                <QueryBuilderField @key="column"
                                                                   Field="column.Property"
                                                                   Title="@column.HeaderName"
                                                                   Values="@column.FilterValues"
                                                                   ValueTemplate="@column.FilterTemplate" />
                                            }
                                        </QueryFields>
                                        <FooterTemplate>
                                            <div class="filter-footer">
                                                <button type="submit"
                                                        name="apply-filters"
                                                        class="query-button"
                                                        aria-label="Apply Filters">
                                                    Apply
                                                </button>

                                                <button type="button"
                                                        name="clear-filters"
                                                        class="query-button"
                                                        aria-label="Clear Filters"
                                                        @onclick="ClearFilters">
                                                    Clear
                                                </button>
                                            </div>
                                        </FooterTemplate>
                                    </QueryBuilder>
                                </form>
                            </div>
                        </div>
                    </div>
                }
                @if (ColumnPickerOpen)
                {
                    <div class="data-grid__columns">
                        <div class="column-picker">
                            <div class="column-picker-background"
                                 @onclick="CloseColumnPicker"></div>

                            <div class="column-picker-container">
                                <div class="column-picker-list">
                                    @foreach (var column in Columns)
                                    {
                                        <label @key="column"
                                               title="Toggle '@column.HeaderName' Visibility"
                                               class="column-picker-label">
                                            <input type="checkbox"
                                                   name="column-@column.PropertyName"
                                                   class="column-picker-checkbox"
                                                   disabled="@(!column.Hideable)"
                                                   checked="@column.CurrentVisible"
                                                   aria-label="Toggle '@column.HeaderName' Visibility"
                                                   @onchange="() => ToggleVisible(column)" />
                                            <span class="column-picker-text">
                                                @column.HeaderName
                                            </span>
                                        </label>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (DataError != null)
                {
                    <div class="data-grid__error">
                        @if (ErrorTemplate != null)
                        {
                            @ErrorTemplate(DataError)
                        }
                        else
                        {
                            @DataError.Message
                        }
                    </div>
                }
                else if (View == null)
                {
                    <div class="data-grid__skeleton">
                        @for (int i = 0; i < 5; i++)
                        {
                            <Skeleton @key="i" />
                        }
                    </div>
                }
                else if (View.Count == 0)
                {
                    <div class="data-grid__empty">
                        @if (EmptyTemplate != null)
                        {
                            @EmptyTemplate
                        }
                        else
                        {
                            <span>No records to display</span>
                        }
                    </div>
                }
                else if (Virtualize)
                {
                    <div class="data-grid__body"
                         role="rowgroup">
                        <Virtualize TItem="TItem"
                                    Items="View"
                                    Context="item"
                                    ItemSize="VirtualItemSize"
                                    OverscanCount="VirtualOverscan">
                            @RowFragment(item)
                        </Virtualize>
                    </div>
                }
                else if (HasGrouping)
                {
                    var groupColumn = Columns.FirstOrDefault(c => c.Grouping) ?? Columns.First();

                    <div class="data-grid__body"
                         role="rowgroup">
                        @foreach (var group in View.GroupBy(groupColumn.CellValue))
                        {
                            @GroupFragment((groupColumn, group))
                        }
                    </div>
                }
                else
                {
                    <div class="data-grid__body"
                         role="rowgroup">
                        @foreach (var item in View)
                        {
                            @RowFragment(item)
                        }
                    </div>
                }

                @if (HasFooter())
                {
                    <div class="data-grid__footer"
                         role="row">
                        @if (DetailTemplate != null || HasGrouping)
                        {
                            <div class="data-grid__footer-cell data-grid__footer-cell--expand"
                                 role="gridcell">
                            </div>
                        }
                        @if (Selectable)
                        {
                            <div class="data-grid__footer-cell data-grid__footer-cell--checkbox"
                                 role="gridcell">
                            </div>
                        }
                        @foreach (var column in VisibleColumns)
                        {
                            <div class="@column.CurrentFooterClass"
                                 style="@column.CurrentFooterStyle"
                                 role="gridcell">
                                @if (column.FooterTemplate != null)
                                {
                                    @column.FooterTemplate(View)
                                }
                            </div>
                        }
                    </div>
                }
            </div>

        </div>

        @if (DataPagination != null)
        {
            <CascadingValue IsFixed="true"
                            Value="Pager"
                            Name="PagerState">
                <div class="data-pagination">
                    @DataPagination(this)
                </div>
            </CascadingValue>
        }
        @if (IsLoading)
        {
            @if (LoadingTemplate == null)
            {
                <LoadingBlock IsLoading="true"
                              ShowOverlay="true"
                              LoadingText="" />
            }
            else
            {
                @LoadingTemplate
            }
        }
    </div>
</CascadingValue>

@code
{
    protected RenderFragment<DataColumn<TItem>> HeaderFragment => column => __builder =>
    {
        <div @key="column"
             class="@column.CurrentHeaderClass"
             style="@column.CurrentHeaderStyle"
             role="columnheader">
            @if (Sortable && column.Sortable)
            {
                <button class="data-grid__sort-button"
                        @onclick="() => SortByAsync(column)"
                        aria-sort="@column.CurrentSort"
                        aria-label="Sort by @column.HeaderName">
                    @HeaderValue(column)
                    <span class="data-grid__sort-icon data-grid__sort-icon--@column.CurrentSort"
                          aria-hidden="true"></span>
                </button>
            }
            else
            {
                <div class="data-grid__header-title">
                    @HeaderValue(column)
                </div>
            }
        </div>
    };

    protected RenderFragment<DataColumn<TItem>> HeaderValue => column => __builder =>
    {
        @if (column.HeaderTemplate != null)
        {
            @column.HeaderTemplate
        }
        else
        {
            @column.HeaderName
        }
    };

    protected RenderFragment<TItem> RowFragment => item => __builder =>
    {
        var hasDetail = DetailTemplate != null;
        var isSelected = Selectable && IsRowSelected(item);
        var isExpanded = hasDetail && IsRowExpanded(item);
        var hashCode = item?.GetHashCode() ?? DateTime.UtcNow.Ticks;
        var rowId = $"row-{hashCode}";
        var detailId = $"detail-{hashCode}";

        <div @key="@rowId"
             role="row"
             class="@ComputeRowClass(item)"
             style="@RowStyle?.Invoke(item)"
             @attributes="RowAttributes?.Invoke(item)"
             @ondblclick="() => RowDoubleClick.InvokeAsync(item)"
             aria-selected="@isSelected">

            @if (hasDetail)
            {
                <div class="data-grid__cell data-grid__cell--expand"
                     role="gridcell">
                    <button type="button"
                            name="expand-detail-button"
                            @onclick="() => ToggleDetailRow(item)"
                            class="data-grid__expand-button"
                            aria-label="Toggle Details Collapse"
                            aria-expanded="@isExpanded"
                            aria-controls="@detailId">
                        @if (isExpanded)
                        {
                            <span class="data-grid__collapsed-icon"
                                  aria-hidden="true"></span>
                        }
                        else
                        {
                            <span class="data-grid__expand-icon"
                                  aria-hidden="true"></span>
                        }
                    </button>
                </div>
            }
            else if (HasGrouping)
            {
                <div class="data-grid__cell data-grid__cell--expand"
                     role="gridcell">
                </div>
            }

            @if (Selectable)
            {
                <div class="data-grid__cell data-grid__cell--checkbox"
                     role="gridcell">
                    <input type="checkbox"
                           name="select-row-@hashCode"
                           class="data-grid__checkbox"
                           checked="@isSelected"
                           aria-label="Toggle Row Selection"
                           @onchange="() => ToggleSelectRow(item)">
                </div>
            }
            @foreach (var column in VisibleColumns)
            {
                <div @key="column"
                     role="gridcell"
                     class="@column.CurrentCellClass"
                     style="@(column.ComputeCellStyle(item))"
                     @attributes="@(column.ComputeAttributes(item))">
                    @if (column.Template != null)
                    {
                        @column.Template(item)
                    }
                    else
                    {
                        @column.CellValue(item)
                    }
                </div>
            }

        </div>
        @if (DetailTemplate != null && isExpanded)
        {
            <div @key="@detailId"
                 id="@detailId"
                 class="data-grid__details">
                @DetailTemplate(item)
            </div>
        }
    };

    protected RenderFragment<(DataColumn<TItem>, IGrouping<string, TItem>)> GroupFragment => item => __builder =>
    {
        var groupColumn = item.Item1;
        var group = item.Item2;
        var groupKey = group.Key;
        var isGroupExpanded = IsGroupExpanded(groupKey);
        var hashCode = group.GetHashCode();
        var rowId = $"row-{hashCode}";
        var groupId = $"group-{hashCode}";

        <div @key="@rowId"
             class="@ComputeGroupClass(groupKey)"
             role="row">
            <button type="button"
                    name="expand-group-button"
                    class="data-grid__expand-button"
                    @onclick="() => ToggleGroupRow(groupKey)"
                    aria-label="Toggle Group Collapse"
                    aria-expanded="@isGroupExpanded"
                    aria-controls="@groupId">
                @if (isGroupExpanded)
                {
                    <span class="data-grid__collapsed-icon"
                          aria-hidden="true"></span>
                }
                else
                {
                    <span class="data-grid__expand-icon"
                          aria-hidden="true"></span>
                }
            </button>
            <div class="data-grid__group-title">
                @if (groupColumn.GroupTemplate != null)
                {
                    @groupColumn.GroupTemplate(group)
                }
                else
                {
                    <span>@groupKey</span>
                    <span class="data-grid__group-count">(@group.Count())</span>
                }
            </div>
        </div>
        @if (isGroupExpanded)
        {
            <div @key="@groupId"
                 id="@groupId"
                 class="data-grid__group-body">
                @foreach (var item in group)
                {
                    @RowFragment(item)
                }
            </div>
        }
    };
}
