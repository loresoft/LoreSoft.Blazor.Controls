@typeparam TItem
@inherits DataComponentBase<TItem>
@namespace LoreSoft.Blazor.Controls

@using LoreSoft.Blazor.Controls.Extensions
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

<CascadingValue Value="this" Name="Grid">
    <div class="@ClassName" @attributes="@AdditionalAttributes">
        @if (DataToolbar != null)
        {
            @DataToolbar(this)
        }

        @if (FilterOpen)
        {
            <div>
                <div class="filter-background"
                     @onclick="CloseFilter"></div>

                <div class="filter-container">
                    <ErrorBoundary>
                        <ChildContent>
                            <form name="filter-builder-form"
                                  @onsubmit="ApplyFilters">
                                <QueryBuilder @ref="QueryBuilder"
                                              TItem="TItem"
                                              QueryFields="QueryFields"
                                              Query="RootQuery">
                                    <FooterTemplate>
                                        <div class="filter-footer">
                                            <button type="submit"
                                                    class="query-button">
                                                Apply
                                            </button>

                                            <button type="button"
                                                    class="query-button"
                                                    @onclick="ClearFilters">
                                                Clear
                                            </button>
                                        </div>
                                    </FooterTemplate>
                                </QueryBuilder>
                            </form>
                        </ChildContent>
                        <ErrorContent>
                            <div class="data-list-error">
                                <div>An error occurred loading the filter builder.</div>
                                <small>@context?.Message</small>
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>
                </div>
            </div>
        }
        @if (SortPickerOpen)
        {
            <div class="column-picker">
                <div class="column-picker-background"
                     @onclick="CloseSortPicker"></div>

                <div class="column-picker-container">
                    <div class="column-picker-list">
                        <div class="sort-picker">
                            <label for="sort-selection">Sort by</label>
                            <select id="sort-selection"
                                    name="sort-selection"
                                    @bind="CurrentSortField"
                                    @bind:after="HandleSortChanged"
                                    aria-label="Sort Field">
                                <option value="">- select -</option>
                                @if (Properties != null)
                                {
                                    @foreach (var property in Properties)
                                    {
                                        <option value="@property.Name">
                                            @property.Name.ToTitle()
                                        </option>
                                    }
                                }
                            </select>
                            <select id="sort-direction"
                                    name="sort-direction"
                                    @bind="CurrentSortDirection"
                                    @bind:after="HandleSortChanged"
                                    aria-label="Sort Direction">
                                <option value="asc">Ascending</option>
                                <option value="desc">Descending</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (DataError != null)
        {
            <div class="data-list-error">
                @if (ErrorTemplate != null)
                {
                    @ErrorTemplate(DataError)
                }
                else
                {
                    @DataError.Message
                }
            </div>
        }
        else if (View == null)
        {
            for (int i = 0; i < 3; i++)
            {
                <div style="display:flex;align-items:center;gap:10px;padding:0 1rem;">
                    <div>
                        <Skeleton Type="SkeletonType.Circle" Width="50px" Height="50px" />
                    </div>
                    <div style="flex-grow:1;">
                        <div class="mb-1">
                            <Skeleton Width="100%" Height="40px" />
                        </div>
                        <div class="mb-1">
                            <Skeleton Width="100%" Height="20px" />
                        </div>
                    </div>
                </div>
            }
        }
        else if (View.Count == 0)
        {
            @if (EmptyTemplate != null)
            {
                @EmptyTemplate
            }
            else
            {
                <div class="data-grid-empty">No records to display</div>
            }
        }
        else if (Virtualize)
        {
            <Virtualize TItem="TItem"
                        Items="View"
                        Context="item"
                        ItemSize="VirtualItemSize"
                        OverscanCount="VirtualOverscan">
                @RowTemplate(item)
            </Virtualize>
        }
        else
        {
            @foreach (var item in View)
            {
                @RowTemplate(item)
            }
        }

        @if (FooterTemplate != null)
        {
            @FooterTemplate
        }

        @if (DataPagination != null)
        {
            <CascadingValue IsFixed="true" Value="Pager" Name="PagerState">
                <div class="data-pagination">
                    @DataPagination(this)
                </div>
            </CascadingValue>
        }

        @if (IsLoading)
        {
            @if (LoadingTemplate == null)
            {
                <LoadingBlock IsLoading="true" ShowOverlay="true" LoadingText="" />
            }
            else
            {
                @LoadingTemplate
            }
        }

    </div>
</CascadingValue>

@code {

}
